/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/meat-tenderizer.glb -t 
*/

import * as THREE from 'three';
import { forwardRef, useMemo } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import type { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    ['meat-tenderizer_1']: THREE.Mesh;
  };
  materials: {
    colormap: THREE.MeshStandardMaterial;
  };
};

const axeTexturePath = '/TexturesAxe/colormap.png';

export const Axe = forwardRef<THREE.Group, React.JSX.IntrinsicElements['group']>((props, ref) => {
  const { nodes, materials } = useGLTF('/meat-tenderizer.glb') as unknown as GLTFResult;
  const axeTexture = useTexture(axeTexturePath);

  const customMaterial = useMemo(() => {
    const newMaterial = materials.colormap.clone();
    newMaterial.map = axeTexture;

    if (newMaterial.map) {
      newMaterial.map.flipY = false;
    }
    newMaterial.needsUpdate = true;

    return newMaterial;
  }, [materials.colormap, axeTexture]);

  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh
        geometry={nodes['meat-tenderizer_1'].geometry}
        material={customMaterial}
      />
    </group>
  );
});

useTexture.preload(axeTexturePath);
useGLTF.preload('/meat-tenderizer.glb');